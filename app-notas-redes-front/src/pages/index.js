import Head from 'next/head'
import { Inter } from 'next/font/google'
import Paper from '@mui/material/Paper';
import Button from '@mui/material/Button';
import TextField from '@mui/material/TextField';
import IconButton from '@mui/material/IconButton';
import DeleteIcon from '@mui/icons-material/Delete';
import Edit from '@mui/icons-material/Edit';
import Box from '@mui/material/Box';
import CircularProgress from '@mui/material/CircularProgress';
import Modal from '@mui/material/Modal';
import React, { useEffect, useState } from 'react';
import { findAll, salvar, editar, deleteById } from '@/service/NotaService';

const inter = Inter({ subsets: ['latin'] })

export default function Home() {
  const [notas, setNotas] = useState(null);
  const [descricao, setDescricao] = useState("");
  const [id, setId] = useState(null);
  const [nome, setNome] = useState("");
  const [carregando, setCarregando] = useState(false);

  const [open, setOpen] = useState(false);

  useEffect(() => {
    buscarNotas()
  }, [0]);

  const buscarNotas = () => {
    setCarregando(true)
    findAll()
      .then((result) => {
        setNotas(result)
      }).finally(() => {
        setCarregando(false)
      });
  }

  const save = () => {
    const nota = {
      id: id,
      nome: nome,
      descricao: descricao,
      data: new Date()
    }

    if (id) {
      editar(nota)
        .then((res) => {
          buscarNotas();
          limpar()
          setOpen(false)
        }
        );
    } else {
      salvar(nota)
        .then((res) => {
          buscarNotas();
          limpar()
          setOpen(false)
        }
        );
    }
  }

  const deletar = (id) => {
    deleteById(id)
      .then((res) => {
        buscarNotas();
      }
      );
  }

  const cancelar = () => {
    limpar()
    setOpen(false)
  }

  const limpar = () => {
    setNome("");
    setDescricao("")
    setId(null)
  }

  const definir = (obj) => {
    setNome(obj.nome);
    setDescricao(obj.descricao)
    setId(obj.id)
    setOpen(true)
  }

  const style = {
    borderRadius: 5,
    position: 'absolute',
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%)',
    width: 400,
    bgcolor: 'background.paper',
    boxShadow: 24,
    p: 4,
  };

  return (
    <>
      <Head>
        <title>Aplicativo de notas</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${inter.className}`} >
        <Modal
          open={open}
          onClose={() => setOpen(false)}
          aria-labelledby="modal-modal-title"
          aria-describedby="modal-modal-description"
        >
          <Box sx={style}>
            <div className={`${inter.className}`} style={{ display: 'flex', flexDirection: 'column', padding: 10, maxWidth: 400 }}>
              <h1>Nota</h1>
              <TextField
                id="outlined-basic"
                value={nome}
                onChange={(e) => {
                  setNome(e.target.value);
                }}
                style={{ width: 400 }}
                label="Nome"
                variant="outlined" />
              <TextField
                id="outlined-multiline-static"
                label="Descrição"
                multiline
                value={descricao}
                onChange={(e) => {
                  setDescricao(e.target.value);
                }}
                style={{ width: 400, marginTop: 20 }}
                rows={8}
              />

              <div style={{ display: 'flex', flexDirection: 'row' }}>
                <Button
                  variant="outlined"
                  onClick={() => {
                    save();
                  }}
                  color='success'
                  style={{ width: 150, height: 55, marginTop: 20 }}>
                  {!id ? 'Cadastrar' : 'Editar'}</Button>
                <Button
                  variant="outlined"
                  onClick={() => {
                    cancelar();
                  }}
                  color='error'
                  style={{ width: 150, height: 55, marginTop: 20, marginLeft: 10, marginRight: 10 }}>
                  Cancelar</Button>
              </div>
            </div>
          </Box>
        </Modal>

        <h1 style={{ margin: 10 }}>Minhas Notas</h1>
        <Button
          variant="contained"
          style={{ width: 220, height: 40, margin: 10 }}
          onClick={() => setOpen(true)}>Nova Anotação</Button>
        <div style={{ display: 'flex', WebkitAlignSelf: 'center', }}>
          <div style={{ display: 'flex', alignItems: 'center', flexDirection: 'row', flexWrap: 'wrap' }}>
            {!carregando && notas && notas.length > 0 ? notas.map((res) => {
              return (
                <div
                  style={{ margin: 10, alignContent: 'center', display: 'flex' }}>
                  <Paper elevation={4} style={{ padding: 10, width: 200, height: 200, backgroundColor: '#f0e06c' }} >
                    <div style={{ flexDirection: 'row', display: 'flex' }}>
                      <h2 style={{
                        overflow: 'hidden',
                        whiteSpace: 'nowrap',
                        textOverflow: 'ellipsis',
                        display: 'flex',
                        flexDirection: 'row',
                        width: 200
                      }}>
                        {res.nome ? res.nome : '-'}
                      </h2>
                      <IconButton
                        color="info"
                        onClick={(e) => definir(res)}
                        component="label"
                        style={{ display: 'flex', alignContent: 'revert' }}>
                        <Edit />
                      </IconButton>

                      <IconButton
                        color="error"
                        onClick={() => deletar(res.id)}
                        component="label"
                        style={{ display: 'flex', alignContent: 'revert' }}>
                        <DeleteIcon />
                      </IconButton>
                    </div>
                    <h4
                      style={{
                        overflow: 'hidden',
                        whiteSpace: 'pre',
                        textOverflow: 'ellipsis',
                        width: 200,
                        height: 55
                      }}
                    >{res.descricao ? res.descricao : '...'}</h4>
                    <div style={{ display: 'flex', flexDirection: 'row-reverse' }}>
                      <h5 style={{ color: 'gray', flexDirection: 'revert' }}>{new Date(res.data).toLocaleString('pt-BR', { timezone: 'UTC' })}</h5>
                    </div>
                  </Paper>
                </div>
              )
            })
              : carregando ?
                <div style={{ margin: 10, alignContent: 'center', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                  <CircularProgress color="success" />
                  <h4>Carregando...</h4>
                </div>
                :
                <div style={{ margin: 10, alignContent: 'center', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                  <h4>Sem dados</h4>
                </div>
            }
          </div>
        </div>
      </main>
    </>
  )
}
